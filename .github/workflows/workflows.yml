name: Deploy to Docker Hub and AWS EC2

on:
  push:
    branches:
      - in-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t solomon11/cloud:latest .

      - name: Push Docker image to Docker Hub
        run: docker push solomon11/cloud:latest

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check for existing EC2 instance
        id: check_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=cloud" --query 'Reservations[0].Instances[0].InstanceId' --output text)
          if [ "$INSTANCE_ID" = "None" ]; then
            echo "No instance found, creating new instance."
            echo "::set-output name=instance_exists::false"
          else
            echo "Instance already exists: $INSTANCE_ID"
            echo "::set-output name=instance_exists::true"
            echo "::set-output name=instance_id::$INSTANCE_ID"
          fi

      - name: Create EC2 instance (if not exists)
        if: steps.check_instance.outputs.instance_exists == 'false'
        id: create_ec2
        run: |
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name cloud-ss --description "Security group for cloud instance" --vpc-id $(aws ec2 describe-vpcs --query 'Vpcs[0].VpcId' --output text) --output text)
          echo "Security Group created: $SECURITY_GROUP_ID"
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0   # Allow SSH
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 8080 --cidr 0.0.0.0/0  # Allow HTTP (port 8080)
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0866a3c8686eaeeba --count 1 --instance-type t2.micro --key-name cloud --security-group-ids $SECURITY_GROUP_ID --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=cloud},{Key=Environment,Value=development}]' --query 'Instances[0].InstanceId' --output text)
          echo "Instance created: $INSTANCE_ID"
          echo "::set-output name=instance_id::$INSTANCE_ID"

      - name: Wait for EC2 instance to be running
        if: steps.create_ec2.outputs.instance_id != ''
        run: |
          INSTANCE_ID=${{ steps.create_ec2.outputs.instance_id }}
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          echo "EC2 instance $INSTANCE_ID is now running."

      - name: Create cloud.pem file
        run: |
          echo "${{ secrets.EC2_KEY }}" > cloud.pem
          chmod 600 cloud.pem

      - name: Install Docker on EC2 (if new instance)
        if: steps.create_ec2.outputs.instance_id != ''
        run: |
          INSTANCE_ID=${{ steps.create_ec2.outputs.instance_id }}
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "Attempting SSH connection to $PUBLIC_IP"
          ssh -o StrictHostKeyChecking=no -i cloud.pem ubuntu@$PUBLIC_IP "sudo apt-get update && sudo apt-get install -y docker.io && sudo systemctl start docker && sudo systemctl enable docker"

      - name: Deploy PostgreSQL container (if first time)
        if: steps.create_ec2.outputs.instance_id != ''
        run: |
          INSTANCE_ID=${{ steps.create_ec2.outputs.instance_id }}
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          ssh -o StrictHostKeyChecking=no -i cloud.pem ubuntu@$PUBLIC_IP "sudo docker network create my-network"
          ssh -o StrictHostKeyChecking=no -i cloud.pem ubuntu@$PUBLIC_IP "sudo docker run -d --name postgres-container --network my-network -e POSTGRES_USER=user -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} -e POSTGRES_DB=cloud_db -p 5432:5432 postgres"

      - name: Deploy updated application container

        run: |
          INSTANCE_ID=""
          if [ "${{ steps.create_ec2.outputs.instance_id }}" != "" ]; then
            INSTANCE_ID=${{ steps.create_ec2.outputs.instance_id }}
          else
            INSTANCE_ID=${{ steps.check_instance.outputs.instance_id }}
          fi
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          ssh -o StrictHostKeyChecking=no -i cloud.pem ubuntu@$PUBLIC_IP "sudo docker rm -f clouds-container || true"
          ssh -o StrictHostKeyChecking=no -i cloud.pem ubuntu@$PUBLIC_IP "sudo docker run -d --name clouds-container --network my-network --memory 256m -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-container:5432/cloud_db -e SPRING_DATASOURCE_USERNAME=user -e SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} -p 8080:8080 solomon11/cloud:latest"

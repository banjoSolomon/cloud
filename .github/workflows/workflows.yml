- name: Run PostgreSQL container on EC2
  env:
    INSTANCE_IP: ${{ steps.create_instance.outputs.instance_ip }}
    EC2_KEY: ${{ secrets.EC2_KEY }}
    DB_USERNAME: ${{ secrets.DB_USERNAME }}  # Database username
    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}  # Database password
    DB_NAME: cloud_db  # Specify the name of the new database
  run: |
    echo "Running PostgreSQL container on EC2..."
    ssh -o StrictHostKeyChecking=no -i <(echo "$EC2_KEY") ec2-user@$INSTANCE_IP << 'EOF'
      # Pull PostgreSQL image
      docker pull postgres:latest
    
      # Run PostgreSQL container
      docker run -d --name postgres_container \
        -e POSTGRES_USER=${DB_USERNAME} \
        -e POSTGRES_PASSWORD=${DB_PASSWORD} \
        -e POSTGRES_DB=${DB_NAME} \
        -p 5432:5432 \
        --memory="128m" \
        postgres:latest
    EOF

- name: Run application container on EC2
  env:
    INSTANCE_IP: ${{ steps.create_instance.outputs.instance_ip }}
    EC2_KEY: ${{ secrets.EC2_KEY }}
    DB_USERNAME: ${{ secrets.DB_USERNAME }}  # Database username
    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}  # Database password
    DB_NAME: cloud_db
  run: |
    echo "Running application container on EC2..."
    ssh -o StrictHostKeyChecking=no -i <(echo "$EC2_KEY") ec2-user@$INSTANCE_IP << 'EOF'
      # Load the application Docker image
      docker load -i ~/cloud_image.tar
    
      # Remove the existing application container if it exists
      docker rm -f my_app_container || true
    
      # Run the application container, linking to PostgreSQL
      docker run -d --name my_app_container \
        --link postgres_container:postgres \
        -e DB_URL=postgres://$DB_USERNAME:$DB_PASSWORD@postgres:5432/$DB_NAME \
        -p 80:80 \
        --memory="128m" \
        solomon11/cloud:latest
    EOF
